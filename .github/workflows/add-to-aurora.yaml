name: Add issue to Aurora project

on:
  workflow_call:
    inputs:
      status_field_id:
        description: "ProjectV2 Status field ID (e.g., PVTSSF_xxx)"
        required: false
        type: string
      todo_option_id:
        description: "ProjectV2 option ID for 'Todo' (e.g., PVTSOPT_xxx or short hex)"
        required: false
        type: string
    secrets:
      AURORA_APP_ID:
        required: true
      AURORA_APP_PRIVATE_KEY:
        required: true

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    env:
      ORG: ${{ vars.AURORA_ORG }}
      PROJECT_NUMBER: ${{ vars.AURORA_PROJECT_NUMBER }}

    steps:
      - name: Generate GitHub App installation token
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.AURORA_APP_ID }}
          private_key: ${{ secrets.AURORA_APP_PRIVATE_KEY }}

      - name: Install GitHub Projects v2 extension
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: gh extension install github/gh-projects

      - name: Add issue to Aurora org project
        id: add
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          echo "Adding ${{ github.event.issue.html_url }} to project $PROJECT_NUMBER in $ORG"
          gh projects item-add "$PROJECT_NUMBER" --org "$ORG" --url "${{ github.event.issue.html_url }}" --format json > item.json
          echo "itemId=$(jq -r '.id' item.json)" >> "$GITHUB_OUTPUT"

      - name: Get projectId (required for GraphQL updates)
        id: proj
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          PROJECT_ID=$(gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org) {
                projectV2(number: $number) { id }
              }
            }' -F org="$ORG" -F number="$PROJECT_NUMBER" -q '.data.organization.projectV2.id')
          echo "projectId=$PROJECT_ID" >> "$GITHUB_OUTPUT"
          echo "Project ID: $PROJECT_ID"

      - name: Set Status = Todo (uses projectId)
        if: ${{ inputs.status_field_id != '' && inputs.todo_option_id != '' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          PROJECT_ID: ${{ steps.proj.outputs.projectId }}
          ITEM_ID: ${{ steps.add.outputs.itemId }}
          STATUS_FIELD_ID: ${{ inputs.status_field_id }}
          TODO_OPTION_ID: ${{ inputs.todo_option_id }}
        run: |
          echo "Setting Status=Todo for item $ITEM_ID on project $PROJECT_ID"
          gh api graphql -f query='
            mutation(
              $projectId: ID!,
              $itemId: ID!,
              $fieldId: ID!,
              $optionId: String!
            ) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { singleSelectOptionId: $optionId }
                }
              ) { projectV2Item { id } }
            }' \
            -F projectId="$PROJECT_ID" \
            -F itemId="$ITEM_ID" \
            -F fieldId="$STATUS_FIELD_ID" \
            -F optionId="$TODO_OPTION_ID"
